name: Run Go App  # A descriptive name for your workflow

# Events that trigger this workflow run:
on:
  push:
    branches: [main]      # When code is pushed to the main branch
  pull_request:
    branches: [main]      # When a pull request targets the main branch
  workflow_dispatch:      # Allows manual, on-demand execution from the Actions UI

jobs:
  run-app:
    # Specify the runner by its labels:
    # - self-hosted: your own machine registered as a GitHub runner
    # - linux:       the OS of your runner
    # - x86_64:      the CPU architecture
    runs-on: [self-hosted, linux, x86_64]

    steps:
      # 1) Check out your repository so the workflow has access to your code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2) Install Go, using the version declared in go.mod
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      # 3) Cache Go build artifacts and module downloads to speed up CI
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build     # Local Go compiler cache
            ~/go/pkg/mod          # Remote module download cache
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-   # Fallback if exact key miss

      # 4) Build & run your Go application in one step
      - name: Run main.go
        run: go run main.go
        # golang will compile and execute main.go in a single command

      # 5) Install Python dependencies listed in requirements.txt
      - name: Install Python dependencies
        run: pip install -r requirements.txt

      # 6) Execute your Python application
      - name: Run Python script
        run: python main.py

      # 7) Commit & push any changes that your scripts generate back to the repo
      - name: Push updated files
        run: |
          # Set the Git author for commits performed by this action
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Stage all changes (new, modified, deleted files)
          git add .

          # Only commit if there are staged changes
          if ! git diff --cached --quiet; then
            # Use a UTC timestamp in ISO 8601 format for the commit message
            git commit -m "Auto update: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            # Push the commit back to the main branch on origin
            git push
          else
            echo "No changes to commit."
          fi
